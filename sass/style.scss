@use "foundation"; /*インポート*/
@use "global" as g;
@use "reset";
@use "module";
@use "main";
/*@use "setting" as *; mainに記述*/
/*@use "mixin" as *; mainに記述*/

/*モジュール*/
@use 'sass:string'; // モジュール
@use 'sass:color'; // モジュール
@use 'sass:color' as c; // モジュール エイリアス
@use 'sass:math'; // モジュール
@use 'sass:list'; // モジュール
@use 'sass:map'; // モジュール
@use 'sass:meta'; // モジュール

li {
    @include g.list-reset;
    color: g.$color-error;
}

/*エクステンド*/
.notes {
    color: #d92c25;
    font-weight: bold;
    text-align: center;
}

.bd {
    border-top: 1px solid #900;
    border-bottom: 1px solid #900;
}

.item {
    small {
        display: block;
        padding: 10px;
        @extend .notes;
        @extend .bd;
    }
}

/*連鎖*/
.att {
    color: red;
    font-weight: normal;
}

.attBox {
    @extend .att;
    padding: 15px;
    border: 1px solid red;
}

.notes01 {
    @extend .attBox;
}

/*エクステンド専用のプレースホルダーセレクタ*/
%boxBase {
    padding: 15px;
    border: 1px solid #999;
}

.item01 {
    @extend %boxBase;
    margin-bottom: 20px;
}

section {
    @extend %boxBase;
    margin-bottom: 60px;
}

/*@mediaとエクステンド*/


@media all and (orientation: landscape) {
    %btnBase {
        display: inline-block;
        padding: 5px 10px;
        background: #eee;
    }

    a {
        @extend %btnBase;
    }
}

.btn {
    /*存在しないセレクタのエラー警告回避*/
    @extend %addBtn !optional;
}

/*ミックスイン*/
@mixin boxSet {
    padding: 15px;
    background: #999;
    color: white;
}

.relatedArea {
    @include boxSet;
}

.pickupArea {
    @include boxSet;
}

@mixin kadomaru($value: 3px) {
    -moz-border-radius: $value;
    -webkit-border-radius: $value;
    border-radius: $value;
}

.boxA {
    @include kadomaru;
    background: #eee;
}

.boxB {
    @include kadomaru();
    background: #f1f1f1;
}

/*ミックスイン引数複数指定*/
@mixin boxBase($margin: 30px 0, $padding: 10px) {
    margin: $margin;
    padding: $padding;
}

.boxA {
    @include boxBase;
    background: #eee;
}

.boxB {
    @include boxBase(0 0 50px, 20px);
    background: #f1f1f1;
}

/*第1引数のみ変更*/
.boxB {
    @include boxBase(0 0 50px);
    background: #f1f1f1;
}

/*第2引数のみ変更*/
.boxB {
    @include boxBase($padding: 20px);
    background: #f1f1f1;
}


/*@use "sass:string";*/
@mixin shadow($value) {
    text-shadow: $value;
}

/*配列にするパターン*/
h2 {
    @include shadow((8px 8px 0 #999, 15px -10px 0 #eee));
}

/*文字列にするパターン*/
h2 {
    @include shadow(string.unquote("8px 8px 0 #999, 15px -10px 0 #eee"));
}

/*可変長引数(Variable Arguments)*/
@mixin shadow($value...) {
    text-shadow: $value;
}

h2 {
    @include shadow(8px 8px 0 #999, 15px -10px 0 #eee);
}

@mixin boxBase($w: 250px, $pd: 15px, $bg_c: #fff, $bd_c: #ccc) {
    width: $w;
    padding: $pd;
    background-color: $bg_c;
    border: 1px solid $bd_c;
}

$values: 300px, 20px;

.item {
    display: flex;
    @include boxBase($values...);
}

/*@content*/
@mixin media($width-media: 768px) {
    @media only screen and (max-width: $width-media) {
        @content;
    }
}

.item {
    .image {
        float: left;

        @include media {
            float: none;
        }
    }

    .text {
        overflow: hidden;
        margin-left: 15px;

        @include media {
            margin-left: 0;
        }
    }
}

/*@at-root*/
/*.block {
    .element-A {
        width: 80%;
    }

    @at-root .element-B {
        width: 100%;
    }
}*/

.block {
    .element-A {
        width: 80%;
    }
    @at-root {
        .element-B {
            width: 100%;
        }
        .element-C {
            width: 50%;
        }
    }
}
/*メディア@at-root*/
.block {
    width: 50%;
    @media (max-width: 640px) {
        width: 100%;
        @at-root {
            .item {
                margin-bottom: 30px;
            }
        }
    }
}
/*@at-rootオプション without*/
.block {
    width: 50%;
    @media (max-width: 640px) {
        width: 100%;
        @at-root (without: media) {
            .item {
                margin-bottom: 30px;
            }
        }
    }
}
/*@at-rootオプション rule*/
.block {
    width: 50%;
    @media (max-width: 640px) {
        width: 100%;
        @at-root (without: media rule) {
            .item {
                margin-bottom: 30px;
            }
        }
    }
}
/*@at-rootオプション with*/
.block {
    width: 50%;
    @media (max-width: 640px) {
        width: 100%;
        @at-root (with: media) {
            .item {
                margin-bottom: 30px;
            }
        }
    }
}

/*インターポレーション*/
$imgPath: '../common/images/';
#main {
    background: url(#{$imgPath}main.png);
}
p.sampleB {
    $font-size: 12px;
    $line-height: 30px;
    font: #{$font-size}/#{$line-height};
}
@for $i from 0 to 2 {
    .mt#{$i * 5} {
        margin-top: 5px * $i;
    }
}
$property: margin;

p {
    #{$property}-bottom: 0;
}
$text: "CSS";
.#{$text} a::after {
    content: "#{$text} Tips";
}

/*@if条件分岐*/
$generalStyle: true;
@if $generalStyle {
    .text-accent {
        color: red;
    }
    .text-link {
        color: blue;
    }
}
$getStyle: 2;

@mixin style {
    @if $getStyle == 1 {
        margin: 0 0 30px;
        padding: 15px;
        background: #eee;
    }
    @else if $getStyle == 2 {
        margin: 0 10px 15px;
        padding: 20px 15px;
        border: 2px solid #333;
    }
    @else {
        margin: 0 0 10px;
    }
}

.box {
    @include style;
}

/*@for繰り返し*/
/*throughは指定した数値を含んで繰り返す↓3回以下繰り返す*/
@for $value from 1 through 3 {
    .throughSample_#{$value} {
        margin-bottom: 1px * $value;
    }
}
/*toは指定した数値を含まず繰り返す↓3回未満繰り返す*/
@for $value from 1 to 3 {
    .toSample_#{$value} {
        margin-bottom: 1px * $value;
    }
}

/**/
@for $value from 1 through 2 {
    .mt_#{$value * 10} {
        margin-top: 10px * $value;
    }
    .mb_#{$value * 10} {
        margin-bottom: 10px * $value;
    }
}

/*@while柔軟な繰り返し*/
$value: 20;
@while $value > 0 {
    .mt_#{$value} {
        margin-top: $value + px;
    }
    .mb_#{$value} {
        margin-bottom: $value + px;
    }
    $value: $value - 10;
}

/**/
$value: 300;
@while $value > 200 {
    .box_#{value} {
        width: 2px * $value;
    }
    $value: $value - 32;
}

/*@eachリスト（配列）の要素に対して繰り返す*/
$nameList: top, about, company, contact;
@each $name in $nameList {
    .body-#{$name} {
        background-image: url(../img/bg_#{$name}.png);
    }
}

/*関数モジュール*/
/*@use 'sass:color';*/
.example {
    background: color.scale(#000000, $lightness: 30%);
}
/*@use 'sass:color' as c;　エイリアス*/
.example {
    background: c.scale(#000000, $lightness: 30%);
}
/*math.abs()*/
/*@use 'sass:math';*/
$space: -100px;

.itemA {
    margin-top: $space;
    padding-top: math.abs($space);
}
/*math.round()小数点以下四捨五入*/
/*@use 'sass:math';*/
$width: 100%;
/*少数点も表示される*/
.boxA {
    width: math.div($width, 6);
}
/*小数点を四捨五入する*/
.boxB {
    width: math.round(math.div($width, 6));
}
/*math.ceil()小数点以下切り上げ*/
.boxB {
  width: math.ceil(math.div($width, 3));
}
/*math.floor()小数点以下切り上げ*/
.boxB {
  width: math.floor(math.div($width, 6));
}
/*rgb(関数)モジュール不要*/
.item {
    color: rgb(#6a5468, 0.3);
}

/*color.scale()関数*/
/*@use 'sass:color';*/
body {
    color: color.scale(#000, $lightness: 40%);
}
body {
    color: color.scale(#fff, $lightness: -20%);
}

$c: #555;
.boxA {
    color: color.scale($c, $lightness: 20%);
}

/*color.mix()関数カラーコードの中間色を作る*/
body {
    color: color.mix(#000, #fff, 50%);
}

body {
    color: color.mix(rgba(0, 0, 0, 0.4), #fff, 50%);
}

$a: #000;
$b: #fff;
.boxA {
    color: color.mix($a, $b, 80%);
}
.boxB {
    color: color.mix($a, $b, 20%);
}

/*list.nth()関数。指定したリストのN番目の値を取得することができる*/
/*@use 'sass:list';*/
$nameList: top, about, company;
.item {
    background: url(#{list.nth($nameList, 2)}.png);
}

/*map.get関数。Map型専用関数。指定したキーの値を取得する*/
/*@use 'sass:map';*/
$colors: (
    instagram: #d1006b,
    facebook: #3b5998,
);
.sns-facebook {
    color: map.get($colors, facebook);
}

/*@function*/
/*@use 'sass:math'; 今回はmathも使うのでmathモジュール読み込み*/
/*@function halfSize($value) {
    @return math.div($value, 2);
}
.boxA {
    width: halfSize(100px);
}*/
/*ネイティブ関数と組み合わせる*/
/*@function halfSize($value) {
    @return math.round(math.div($value, 2));
}
.boxA {
    width: halfSize(105px);
}*/
/*値を変数に入れる*/
/*$width: 105px;
@function halfSize() {
    @return math.round(math.div($width, 2));
}
.boxA {
    width: halfSize();
}*/
/*引数に初期値を設定する*/
$width: 105px;
@function halfSize($value: $width) {
    @return math.round(math.div($value, 2));
}
.boxA {
    width: halfSize();
}
.boxA {
    width: halfSize(200px);
}

/*@debug結果確認*/
@debug 10em + 12em;

$value: 500;
@function debugTest() {
    @debug $value;
    $value: $value - 100;
    $value: $value - 100;
    @debug $value;
    $value: $value - 100;
    $value: $value - 100;
    $value: $value - 100;
    @debug $value;
    @return $value + px;
}

.boxA {
    width: debugTest();
}
/*@warnで警告表示*/
/*@use 'sass:math'; 今回はmathを使用*/
$value: 1000px;
@function warnTest() {
    /*math.is-unitless()関数は単位があるかなしかを返す*/
    @if math.is-unitless($value) {
        $value: $value + px;
    }
    @else {
        @warn "#{$value}は駄目！$valueに単位は入れないで！";
    }
    @return $value;
}
.box {
    width: warnTest();
}
/*@errorでエラーを出力し、処理を中断する*/
/*@use 'sass:math'; 今回はmathを使用*/
/*$value: 1000px;
@function errorTest() {
    // math.is-unitless()関数は単位があるかなしかを返す
    @if math.is-unitless($value) {
        $value: $value + px;
    }
    @else {
        @error "#{$value}は駄目！$valueに単位は入れないで！";
    }
    @return $value;
}
.box {
    width: errorTest();
}*/

/*defaultフラグ*/
$width: 320px;
$height: 80px;
.boxA {
    $width: 33.3% !default;
    $height: 50%;
    width: $width; // グローバル$widthを参照
    height: $height; // ローカル$heightを参照
}
.boxB {
    $width: 100vw;
    $height: 50vw !default;
    width: $width; // ローカル$widthを参照
    height: $height; // グローバル$heightを参照
}
/*globalフラグ*/
$width: 320px;
$height: 80px;

.boxA {
    $width: 33.3% !global;
    width: $width; // 上書きされたグローバル$widthを参照
    height: $height; // グローバル$heightを参照
}
.boxB {
    $width: 100vw;
    $height: 50vw;
    width: $width; // ローカル$widthを参照
    height: $height; // ローカル$heightを参照
}
.boxC {
    width: $width; // 上書きされたグローバル$widthを参照
    height: $height; // グローバル$heightを参照
}

/*meta.type-of()関数。データタイプの判別*/
/*@use 'sass:meta';*/
.DataTypes {
    /*Number型*/
    property: meta.type-of(10%);
      
    /*Color型*/
    property: meta.type-of(red);
      
    /*String型*/
    property: meta.type-of(sans-serif);
      
    /*Boolean型*/
    property: meta.type-of(true);
      
    /*Null型*/
    property: meta.type-of(null);
      
    /*List型*/
    property: meta.type-of(1.5em 1em 0 2em);
      
    /*Map型*/
    $map:(key1: value1, key2: value2);
    property: meta.type-of($map);
      
    /*Function型*/
    property: meta.type-of(get-function("lighten"));
}

/*@ifとの組み合わせ。指定したデータタイプ以外は実行しない*/
/*@use 'sass:meta';*/
/*@function example($value) {
    @if meta.type-of($value) == number {
        // 処理
    }
}*/

/*chap締め*/